Layered Network Model (aka “ISO/OSI”). This Network Model
describes a system of network functionality that has many advantages over other models. It's layers:
• Application
• Presentation
• Session
• Transport
• Network
• Data Link
• Physical

The Physical Layer is the hardware (serial, Ethernet, etc.). The Application Layer is just about as far from
the physical layer as you can imagine—it’s the place where users interact with the network.

A layered model more consistent with Unix might be:
• Application Layer (telnet, ftp, etc.)
• Host-to-Host Transport Layer (TCP, UDP)
• Internet Layer (IP and routing)
• Network Access Layer (Ethernet, wi-fi, or whatever)


struct addrinfo {
int ai_flags; // AI_PASSIVE, AI_CANONNAME, etc.
int ai_family; // AF_INET, AF_INET6, AF_UNSPEC
int ai_socktype; // SOCK_STREAM, SOCK_DGRAM
int ai_protocol; // use 0 for "any"
size_t ai_addrlen; // size of ai_addr in bytes
struct sockaddr *ai_addr; // struct sockaddr_in or _in6
char *ai_canonname; // full canonical hostname
struct addrinfo *ai_next; // linked list, next node
};

struct sockaddr holds socket address information for many types of sockets.
sa_data contains a destination address and port number for the socket.
struct sockaddr {
unsigned short sa_family; // address family, AF_xxx
char sa_data[14]; // 14 bytes of protocol address
};

// (IPv4 only--see struct sockaddr_in6 for IPv6)
struct sockaddr_in {
short int sin_family; // Address family, AF_INET
unsigned short int sin_port; // Port number
struct in_addr sin_addr; // Internet address
unsigned char sin_zero[8]; // Same size as struct sockaddr
};

// Internet address (a structure for historical reasons)
struct in_addr {
uint32_t s_addr; // that's a 32-bit int (4 bytes)
};

struct sockaddr_in6 {
u_int16_t sin6_family; // address family, AF_INET6
u_int16_t sin6_port; // port number, Network Byte Order
u_int32_t sin6_flowinfo; // IPv6 flow information
struct in6_addr sin6_addr; // IPv6 address
u_int32_t sin6_scope_id; // Scope ID
};
struct in6_addr {
unsigned char s6_addr[16]; // IPv6 address
};

struct sockaddr_storage that is designed to be
large enough to hold both IPv4 and IPv6 structures. See, for some calls, sometimes you don’t know in
advance if it’s going to fill out your struct sockaddr with an IPv4 or IPv6 address. So you pass in this
parallel structure, very similar to struct sockaddr except larger, and then cast it to the type you need:
struct sockaddr_storage {
sa_family_t ss_family; // address family
// all this is padding, implementation specific, ignore it:
char __ss_pad1[_SS_PAD1SIZE];
int64_t __ss_align;
char __ss_pad2[_SS_PAD2SIZE];
};


The function you want to use, inet_pton(),
converts an IP address in numbers-and-dots notation into either a struct in_addr or a struct
in6_addr depending on whether you specify AF_INET or AF_INET6. (“pton” stands for “presentation to network”—you can call it “printable to network” if that’s easier to remember.) The conversion can be
made as follows:
struct sockaddr_in sa; // IPv4
struct sockaddr_in6 sa6; // IPv6
inet_pton(AF_INET, "10.12.110.57", &(sa.sin_addr)); // IPv4
inet_pton(AF_INET6, "2001:db8:63b3:1::3490", &(sa6.sin6_addr)); // IPv6


Useful links:

- Socketing
https://www.bogotobogo.com/cplusplus/sockets_server_client.php

- Nginx Config file & Siege
https://www.netnea.com/cms/nginx-tutorial-2_minimal-nginx-configuration/
https://medium.com/adrixus/beginners-guide-to-nginx-configuration-files-527fcd6d5efd

- Status Code
https://moz.com/learn/seo/http-status-codes


Videos:
- Whole series of simple server from scratch in C++: https://www.youtube.com/watch?v=YwHErWJIh6Y



Request Line: This specifies the HTTP method, URL, and HTTP version.
Host: This specifies the domain name of the server the request is being sent to.
User-Agent: This identifies the client making the request, such as a web browser or application.
Accept: This specifies the MIME types that the client can handle in the response.
Accept-Language: This specifies the preferred language for the response, using a comma-separated list of language codes.
Accept-Encoding: This specifies the compression algorithms that the client can handle in the response.
Referer: This specifies the URL of the page that linked to the current page.
Content-Type: This specifies the MIME type of the request body.
Content-Length: This specifies the length of the request body in bytes.
Authorization: This specifies credentials that are required to access the requested resource.
Request Body: This contains the data being sent in the request, such as form data or JSON payloads.

Example:
POST /api/create_user HTTP/1.1
Host: example.com
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/90.0.4430.72 Safari/537.36
Accept: */*
Accept-Language: en-US,en;q=0.5
Accept-Encoding: gzip, deflate, br
Referer: http://example.com/signup
Content-Type: application/json
Content-Length: 43
Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c

{"username": "johndoe", "password": "p@ssw0rd"}


Request = Request-Line
*(( general-header | request-header | entity-header ) CRLF) CRLF [ message-body ]

1. Request-Line = Method SP Request-URI SP HTTP-Version CRLF

a. Method = "OPTIONS" 
                | "GET"  
                | "HEAD"    
                | "POST"    
                | "PUT"     
                | "DELETE"  
                | "TRACE"   
                | "CONNECT" 
                | extension-method (extension-method = token)

b. Request-URI    = "*" | absoluteURI | abs_path | authority

c. general-header = 	Cache-Control     
                        | Connection        
                        | Date              
                        | Pragma            
                        | Trailer           
                        | Transfer-Encoding 
                        | Upgrade           
                        | Via               
                        | Warning           

d. request-header = 	Accept                                         
                        | Accept-Charset                                 
		        | Accept-Encoding                                
			| Accept-Language                                
			| Authorization                                  
			| Expect                   
                        | From                     
                        | Host                     
                        | If-Match                 
                        | If-Modified-Since        
                        | If-None-Match            
                        | If-Range                 
                        | If-Unmodified-Since      
                        | Max-Forwards             
                        | Proxy-Authorization      
                        | Range                    
                        | Referer                  
                        | TE                       
                        | User-Agent               

e. entity-header  = 	Allow            
                        | Content-Encoding 
                        | Content-Language 
                        | Content-Length   
                        | Content-Location 
                        | Content-MD5      
                        | Content-Range    
                        | Content-Type     
                        | Expires          
                        | Last-Modified    
                        | extension-header

